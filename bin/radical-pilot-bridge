#!/usr/bin/env python

__copyright__ = "Copyright 2014-2019, http://radical.rutgers.edu"
__license__   = "MIT"


import sys

import setproctitle  as spt
import radical.utils as ru


# ------------------------------------------------------------------------------
#
def main(cfg):
    '''
    This thin wrapper starts a ZMQ bridge.  It expects a single argument:
    a config to use for the bridge's configuration.  The config must contain:

      - uid : UID of bridge instance (unique to the hosting session)
      - name: name of the bridge
      - kind: type of bridge (`pubsub` or `queue`)

    If the config contains a `heartbeat` section, that section must be formatted
    as follows:

        {
          'from'    : 'uid',
          'pub'     : 'addr_pub',
          'sub'     : 'addr_sub',
          'interval': <float>,
          'timeout' : <float>
        }

    If that section exists, the process will daemonize and heartbeats are used
    to manage the bridge lifetime: the lifetime of this bridge is then dependent
    on receiving heartbeats from the given `uid`: after `timeout` seconds of no
    heartbeats arriving, the bridge will terminate.  The bridge itself will
    publish heartbeats every `interval` seconds on the heartbeat channel under
    its own uid.

    If the heartbeat section is not present in the config file, the components
    lifetime is expected to be explicitly managed, i.e., that this wrapper
    process hosting the bridge is terminated externally.

    The config file may contain other entries which are passed to the bridge
    and are interpreted by the bridge implementation.

    After startup, the bridge's communication endpoint URLs are stored in a
    file `$uid.cfg`, in the form (shown for pubsub and queue type bridges):

        {
          'uid': '$bridge.uid',
          'pub': '$addr_pub',
          'sub': '$addr_sub'
        }

        {
          'uid': '$bridge.uid',
          'put': '$addr_put',
          'get': '$addr_get'
        }

    That config is formed so that any publishers, subscribers, putters or getters
    can obtain the respective bridge addresses automatically.  This also holds
    for command line tools like:

        > radical-pilot-bridge command.cfg                [1]
        > radical-pilot-sub    command foo &              [2]
        > radical-pilot-pub    command foo bar            [3]

    [1] establishes the pubsub channel 'command'
    [2] connect to the command channel, subscribe for topic `foo`
    [3] connect to the command channel, send messages for topic `foo`
    '''

    uid = cfg.uid
    log = ru.Logger(name=cfg.uid, ns='radical.pilot', path=cfg.path)

    spt.setproctitle('rp.%s' % uid)

    bridge  = ru.zmq.Bridge.create(cfg)
    bridge.start()

    ru.write_json('%s/%s.cfg' % (cfg.path, uid),
                  {'uid'          : bridge.uid,
                   bridge.type_in : str(bridge.addr_in),
                   bridge.type_out: str(bridge.addr_out)})


    hb = ru.Heartbeat(uid=bridge.uid,
                      timeout = cfg.heartbeat.timeout,
                      interval= cfg.heartbeat.interval)

    # -------------------------------------------------
    # forward session heartbeat to bridge
    def hb_sub(topic, msg):
        hb.beat(uid=msg['uid'])
        if msg['uid'] == cfg.cmgr:
            hb_pub.put('heartbeat', msg={'uid' : uid})
    # -------------------------------------------------

    hb_pub = ru.zmq.Publisher ('heartbeat', cfg.heartbeat.addr_pub, log=log)
    hb_sub = ru.zmq.Subscriber('heartbeat', cfg.heartbeat.addr_sub, log=log,
                         topic='heartbeat', cb=hb_sub)

    bridge.wait()  # block forever


# ------------------------------------------------------------------------------
#
if __name__ == "__main__":

    if len(sys.argv) != 2:
        sys.stderr.write('error: argument error\n'
                         'usage: %s <cfg_file>\n\n' % sys.argv[0])
        raise RuntimeError('argument error: %s' % sys.argv)

    fname = sys.argv[1]
    cfg   = ru.Config(path=fname)
    base  = '%s/%s' % (cfg.path, cfg.uid)

    ru.daemonize(main=main, args=[cfg], stdout='%s.out' % base,
                                        stderr='%s.err' % base)
    sys.exit(0)


# ------------------------------------------------------------------------------

